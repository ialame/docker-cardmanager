#!/bin/bash

echo "üîß Correction des URLs Git"
echo "=========================="

# 1. V√©rifier le fichier .env actuel
echo "üìã Configuration Git actuelle :"
if [ -f ".env" ]; then
    echo "‚úÖ Fichier .env trouv√©"

    echo ""
    echo "URLs actuelles :"
    grep -E "^(MASON_REPO_URL|PAINTER_REPO_URL|GESTIONCARTE_REPO_URL)" .env || echo "Aucune URL trouv√©e"

    echo ""
    echo "Branches actuelles :"
    grep -E "^(MASON_BRANCH|PAINTER_BRANCH|GESTIONCARTE_BRANCH)" .env || echo "Aucune branche trouv√©e"
else
    echo "‚ùå Fichier .env non trouv√©"
fi

echo ""
echo "üîç Probl√®me identifi√© : URLs SSH au lieu d'URLS HTTPS"
echo "üí° Docker ne peut pas utiliser les cl√©s SSH, nous devons convertir en HTTPS"

# 2. Conversion des URLs SSH vers HTTPS
echo ""
echo "üîÑ Conversion des URLs SSH vers HTTPS..."

# Sauvegarder le .env actuel
cp .env .env.backup-$(date +%s)
echo "üíæ Sauvegarde cr√©√©e : .env.backup-*"

# Fonction pour convertir une URL SSH en HTTPS
convert_ssh_to_https() {
    local ssh_url="$1"

    if [[ "$ssh_url" == git@bitbucket.org:* ]]; then
        # Bitbucket SSH vers HTTPS
        repo_path=$(echo "$ssh_url" | sed 's|git@bitbucket.org:||' | sed 's|\.git$||')
        echo "https://bitbucket.org/$repo_path.git"
    elif [[ "$ssh_url" == git@github.com:* ]]; then
        # GitHub SSH vers HTTPS
        repo_path=$(echo "$ssh_url" | sed 's|git@github.com:||' | sed 's|\.git$||')
        echo "https://github.com/$repo_path.git"
    elif [[ "$ssh_url" == git@gitlab.com:* ]]; then
        # GitLab SSH vers HTTPS
        repo_path=$(echo "$ssh_url" | sed 's|git@gitlab.com:||' | sed 's|\.git$||')
        echo "https://gitlab.com/$repo_path.git"
    else
        # Si ce n'est pas SSH, retourner l'URL telle quelle
        echo "$ssh_url"
    fi
}

# Convertir toutes les URLs
if grep -q "^MASON_REPO_URL=" .env; then
    current_mason=$(grep "^MASON_REPO_URL=" .env | cut -d'=' -f2)
    new_mason=$(convert_ssh_to_https "$current_mason")
    sed -i "s|MASON_REPO_URL=.*|MASON_REPO_URL=$new_mason|" .env
    echo "üîß Mason: $current_mason ‚Üí $new_mason"
fi

if grep -q "^PAINTER_REPO_URL=" .env; then
    current_painter=$(grep "^PAINTER_REPO_URL=" .env | cut -d'=' -f2)
    new_painter=$(convert_ssh_to_https "$current_painter")
    sed -i "s|PAINTER_REPO_URL=.*|PAINTER_REPO_URL=$new_painter|" .env
    echo "üé® Painter: $current_painter ‚Üí $new_painter"
fi

if grep -q "^GESTIONCARTE_REPO_URL=" .env; then
    current_gestion=$(grep "^GESTIONCARTE_REPO_URL=" .env | cut -d'=' -f2)
    new_gestion=$(convert_ssh_to_https "$current_gestion")
    sed -i "s|GESTIONCARTE_REPO_URL=.*|GESTIONCARTE_REPO_URL=$new_gestion|" .env
    echo "üí≥ GestionCarte: $current_gestion ‚Üí $new_gestion"
fi

# 3. Configuration de l'authentification pour d√©p√¥ts priv√©s
echo ""
echo "üîê Configuration de l'authentification..."

# V√©rifier si les URLs sont vers des d√©p√¥ts priv√©s Bitbucket
if grep -q "bitbucket.org" .env; then
    echo "üîç D√©p√¥ts Bitbucket d√©tect√©s"
    echo ""
    echo "üí° Pour acc√©der aux d√©p√¥ts priv√©s Bitbucket, vous avez besoin d'un App Password :"
    echo "   1. Allez sur https://bitbucket.org/account/settings/app-passwords/"
    echo "   2. Cr√©ez un nouveau App Password avec les permissions 'Repositories: Read'"
    echo "   3. Copiez le token g√©n√©r√©"
    echo ""

    current_token=$(grep "^GIT_TOKEN=" .env | cut -d'=' -f2)
    if [ -z "$current_token" ]; then
        read -p "üîë App Password Bitbucket (ATBB-xxx) [optionnel]: " bitbucket_token
        if [ ! -z "$bitbucket_token" ]; then
            sed -i "s|GIT_TOKEN=.*|GIT_TOKEN=$bitbucket_token|" .env
            echo "‚úÖ Token configur√©"
        fi
    else
        echo "‚úÖ Token d√©j√† configur√© : ${current_token:0:10}..."
    fi
fi

# 4. Test d'acc√®s aux repositories
echo ""
echo "üß™ Test d'acc√®s aux repositories..."

source .env

test_repo_access() {
    local repo_url="$1"
    local repo_name="$2"
    local token="$3"

    if [ -z "$repo_url" ]; then
        echo "‚ö†Ô∏è $repo_name : URL non configur√©e"
        return
    fi

    # Construire l'URL de test avec token si n√©cessaire
    test_url="$repo_url"
    if [ ! -z "$token" ] && [[ "$repo_url" == https://* ]] && [[ "$repo_url" != *"@"* ]]; then
        # Injecter le token dans l'URL
        test_url=$(echo "$repo_url" | sed "s|https://|https://${token}@|")
    fi

    echo -n "üìã Test $repo_name... "
    if git ls-remote --heads "$test_url" >/dev/null 2>&1; then
        echo "‚úÖ Acc√®s OK"
    else
        echo "‚ùå Acc√®s √©chou√©"
        echo "   üîç V√©rifiez l'URL : $repo_url"
        if [ ! -z "$token" ]; then
            echo "   üîë Token utilis√© : ${token:0:10}..."
        else
            echo "   üí° Aucun token configur√© (OK si d√©p√¥t public)"
        fi
    fi
}

test_repo_access "$MASON_REPO_URL" "Mason" "$GIT_TOKEN"
test_repo_access "$PAINTER_REPO_URL" "Painter" "$GIT_TOKEN"
test_repo_access "$GESTIONCARTE_REPO_URL" "GestionCarte" "$GIT_TOKEN"

# 5. R√©sum√© et prochaines √©tapes
echo ""
echo "‚úÖ Correction des URLs termin√©e !"
echo ""
echo "üìã Configuration finale :"
grep -E "^(MASON_REPO_URL|PAINTER_REPO_URL|GESTIONCARTE_REPO_URL)" .env

echo ""
echo "üöÄ Prochaines √©tapes :"
echo "   1. V√©rifiez que tous les tests d'acc√®s sont ‚úÖ"
echo "   2. Si des tests √©chouent, configurez un token d'acc√®s"
echo "   3. Relancez le build : docker-compose build painter"
echo ""
echo "üí° En cas de probl√®me :"
echo "   - D√©p√¥ts publics : aucun token n√©cessaire"
echo "   - D√©p√¥ts priv√©s GitHub : token commen√ßant par 'ghp_'"
echo "   - D√©p√¥ts priv√©s Bitbucket : App Password commen√ßant par 'ATBB-'"