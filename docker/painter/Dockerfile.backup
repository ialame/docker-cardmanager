# Build image
FROM maven:3.9.6-eclipse-temurin-21 AS builder
WORKDIR /usr/src/app

# Créer un POM parent minimal compatible avec le vrai structure
RUN echo '<?xml version="1.0" encoding="UTF-8"?>' > pom.xml && \
    echo '<project xmlns="http://maven.apache.org/POM/4.0.0"' >> pom.xml && \
    echo '         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' >> pom.xml && \
    echo '         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">' >> pom.xml && \
    echo '    <modelVersion>4.0.0</modelVersion>' >> pom.xml && \
    echo '    <groupId>com.pcagrade</groupId>' >> pom.xml && \
    echo '    <artifactId>cardmanager</artifactId>' >> pom.xml && \
    echo '    <version>1.0.0-SNAPSHOT</version>' >> pom.xml && \
    echo '    <packaging>pom</packaging>' >> pom.xml && \
    echo '    <parent>' >> pom.xml && \
    echo '        <groupId>org.springframework.boot</groupId>' >> pom.xml && \
    echo '        <artifactId>spring-boot-starter-parent</artifactId>' >> pom.xml && \
    echo '        <version>3.2.5</version>' >> pom.xml && \
    echo '        <relativePath/>' >> pom.xml && \
    echo '    </parent>' >> pom.xml && \
    echo '    <properties>' >> pom.xml && \
    echo '        <java.version>21</java.version>' >> pom.xml && \
    echo '        <maven.compiler.source>21</maven.compiler.source>' >> pom.xml && \
    echo '        <maven.compiler.target>21</maven.compiler.target>' >> pom.xml && \
    echo '        <mason.version>2.4.1</mason.version>' >> pom.xml && \
    echo '        <painter.version>1.3.0</painter.version>' >> pom.xml && \
    echo '        <mapstruct.version>1.5.5.Final</mapstruct.version>' >> pom.xml && \
    echo '        <swagger.version>2.2.21</swagger.version>' >> pom.xml && \
    echo '        <resilience4j.version>2.1.0</resilience4j.version>' >> pom.xml && \
    echo '    </properties>' >> pom.xml && \
    echo '    <dependencyManagement>' >> pom.xml && \
    echo '        <dependencies>' >> pom.xml && \
    echo '            <!-- Mason dependencies avec versions explicites -->' >> pom.xml && \
    echo '            <dependency>' >> pom.xml && \
    echo '                <groupId>com.pcagrade.mason</groupId>' >> pom.xml && \
    echo '                <artifactId>mason-commons</artifactId>' >> pom.xml && \
    echo '                <version>${mason.version}</version>' >> pom.xml && \
    echo '            </dependency>' >> pom.xml && \
    echo '            <dependency>' >> pom.xml && \
    echo '                <groupId>com.pcagrade.mason</groupId>' >> pom.xml && \
    echo '                <artifactId>mason-jpa</artifactId>' >> pom.xml && \
    echo '                <version>${mason.version}</version>' >> pom.xml && \
    echo '            </dependency>' >> pom.xml && \
    echo '            <dependency>' >> pom.xml && \
    echo '                <groupId>com.pcagrade.mason</groupId>' >> pom.xml && \
    echo '                <artifactId>mason-jpa-cache</artifactId>' >> pom.xml && \
    echo '                <version>${mason.version}</version>' >> pom.xml && \
    echo '            </dependency>' >> pom.xml && \
    echo '            <dependency>' >> pom.xml && \
    echo '                <groupId>com.pcagrade.mason</groupId>' >> pom.xml && \
    echo '                <artifactId>mason-kubernetes</artifactId>' >> pom.xml && \
    echo '                <version>${mason.version}</version>' >> pom.xml && \
    echo '            </dependency>' >> pom.xml && \
    echo '            <dependency>' >> pom.xml && \
    echo '                <groupId>com.pcagrade.mason</groupId>' >> pom.xml && \
    echo '                <artifactId>mason-ulid</artifactId>' >> pom.xml && \
    echo '                <version>${mason.version}</version>' >> pom.xml && \
    echo '            </dependency>' >> pom.xml && \
    echo '            <dependency>' >> pom.xml && \
    echo '                <groupId>com.pcagrade.mason</groupId>' >> pom.xml && \
    echo '                <artifactId>mason-localization</artifactId>' >> pom.xml && \
    echo '                <version>${mason.version}</version>' >> pom.xml && \
    echo '            </dependency>' >> pom.xml && \
    echo '            <dependency>' >> pom.xml && \
    echo '                <groupId>com.pcagrade.mason</groupId>' >> pom.xml && \
    echo '                <artifactId>mason-json</artifactId>' >> pom.xml && \
    echo '                <version>${mason.version}</version>' >> pom.xml && \
    echo '            </dependency>' >> pom.xml && \
    echo '            <dependency>' >> pom.xml && \
    echo '                <groupId>com.pcagrade.mason</groupId>' >> pom.xml && \
    echo '                <artifactId>mason-oauth2</artifactId>' >> pom.xml && \
    echo '                <version>${mason.version}</version>' >> pom.xml && \
    echo '            </dependency>' >> pom.xml && \
    echo '            <dependency>' >> pom.xml && \
    echo '                <groupId>com.pcagrade.mason</groupId>' >> pom.xml && \
    echo '                <artifactId>mason-transaction-author</artifactId>' >> pom.xml && \
    echo '                <version>${mason.version}</version>' >> pom.xml && \
    echo '            </dependency>' >> pom.xml && \
    echo '            <dependency>' >> pom.xml && \
    echo '                <groupId>com.pcagrade.mason</groupId>' >> pom.xml && \
    echo '                <artifactId>mason-web-client</artifactId>' >> pom.xml && \
    echo '                <version>${mason.version}</version>' >> pom.xml && \
    echo '            </dependency>' >> pom.xml && \
    echo '            <dependency>' >> pom.xml && \
    echo '                <groupId>com.pcagrade.mason</groupId>' >> pom.xml && \
    echo '                <artifactId>mason-test</artifactId>' >> pom.xml && \
    echo '                <version>${mason.version}</version>' >> pom.xml && \
    echo '            </dependency>' >> pom.xml && \
    echo '            <!-- Painter dependencies -->' >> pom.xml && \
    echo '            <dependency>' >> pom.xml && \
    echo '                <groupId>com.pcagrade.painter</groupId>' >> pom.xml && \
    echo '                <artifactId>painter-common</artifactId>' >> pom.xml && \
    echo '                <version>${painter.version}</version>' >> pom.xml && \
    echo '            </dependency>' >> pom.xml && \
    echo '            <dependency>' >> pom.xml && \
    echo '                <groupId>com.pcagrade.painter</groupId>' >> pom.xml && \
    echo '                <artifactId>painter-client</artifactId>' >> pom.xml && \
    echo '                <version>${painter.version}</version>' >> pom.xml && \
    echo '            </dependency>' >> pom.xml && \
    echo '            <!-- Third party dependencies avec versions -->' >> pom.xml && \
    echo '            <dependency>' >> pom.xml && \
    echo '                <groupId>io.swagger.core.v3</groupId>' >> pom.xml && \
    echo '                <artifactId>swagger-annotations</artifactId>' >> pom.xml && \
    echo '                <version>${swagger.version}</version>' >> pom.xml && \
    echo '            </dependency>' >> pom.xml && \
    echo '            <dependency>' >> pom.xml && \
    echo '                <groupId>io.github.resilience4j</groupId>' >> pom.xml && \
    echo '                <artifactId>resilience4j-timelimiter</artifactId>' >> pom.xml && \
    echo '                <version>${resilience4j.version}</version>' >> pom.xml && \
    echo '            </dependency>' >> pom.xml && \
    echo '            <dependency>' >> pom.xml && \
    echo '                <groupId>org.mapstruct</groupId>' >> pom.xml && \
    echo '                <artifactId>mapstruct</artifactId>' >> pom.xml && \
    echo '                <version>${mapstruct.version}</version>' >> pom.xml && \
    echo '            </dependency>' >> pom.xml && \
    echo '        </dependencies>' >> pom.xml && \
    echo '    </dependencyManagement>' >> pom.xml && \
    echo '</project>' >> pom.xml

# Installer le POM parent
RUN mvn install -N

# Cloner les dépôts (utilise les variables d'environnement du docker-compose)
ARG MASON_REPO_URL
ARG PAINTER_REPO_URL
ARG MASON_BRANCH=main
ARG PAINTER_BRANCH=main
ARG GIT_TOKEN

# Script pour cloner avec authentification
RUN echo '#!/bin/bash' > /usr/local/bin/git-clone-smart.sh && \
    echo 'REPO_URL=$1' >> /usr/local/bin/git-clone-smart.sh && \
    echo 'TARGET_DIR=$2' >> /usr/local/bin/git-clone-smart.sh && \
    echo 'BRANCH=$3' >> /usr/local/bin/git-clone-smart.sh && \
    echo 'TOKEN=$4' >> /usr/local/bin/git-clone-smart.sh && \
    echo 'if [ -n "$TOKEN" ]; then' >> /usr/local/bin/git-clone-smart.sh && \
    echo '    AUTH_URL=$(echo $REPO_URL | sed "s|https://|https://$TOKEN@|")' >> /usr/local/bin/git-clone-smart.sh && \
    echo 'else' >> /usr/local/bin/git-clone-smart.sh && \
    echo '    AUTH_URL=$REPO_URL' >> /usr/local/bin/git-clone-smart.sh && \
    echo 'fi' >> /usr/local/bin/git-clone-smart.sh && \
    echo 'echo "Cloning $REPO_URL (branch: $BRANCH) to $TARGET_DIR"' >> /usr/local/bin/git-clone-smart.sh && \
    echo 'git clone --depth 1 --branch $BRANCH $AUTH_URL $TARGET_DIR' >> /usr/local/bin/git-clone-smart.sh && \
    chmod +x /usr/local/bin/git-clone-smart.sh

# Cloner les dépôts
RUN /usr/local/bin/git-clone-smart.sh "$MASON_REPO_URL" mason "$MASON_BRANCH" "$GIT_TOKEN"
RUN /usr/local/bin/git-clone-smart.sh "$PAINTER_REPO_URL" painter "$PAINTER_BRANCH" "$GIT_TOKEN"

# Build Mason d'abord
WORKDIR /usr/src/app/mason
RUN mvn clean install -DskipTests

# Build Painter avec le parent POM fixé
WORKDIR /usr/src/app/painter

# CORRECTION CRITIQUE : Utiliser le POM parent que nous avons créé
RUN if [ -f "pom.xml" ]; then \
        sed -i '/<parent>/,/<\/parent>/c\
    <parent>\
        <groupId>com.pcagrade</groupId>\
        <artifactId>cardmanager</artifactId>\
        <version>1.0.0-SNAPSHOT</version>\
        <relativePath>../pom.xml</relativePath>\
    </parent>' pom.xml; \
    fi

# Build avec gestion d'erreurs Maven améliorée
RUN mvn clean package -DskipTests -Dmaven.test.skip=true -X || \
    (echo "=== ERREUR DE BUILD ===" && \
     echo "Contenu du POM painter:" && \
     cat pom.xml | head -30 && \
     echo "=== Modules disponibles ===" && \
     find . -name "pom.xml" -exec echo "=== {} ===" \; -exec head -20 {} \; && \
     exit 1)

# Image finale
FROM eclipse-temurin:21-jre-alpine
WORKDIR /app
RUN apk add --no-cache curl

# Copier le JAR - rechercher dans tous les modules
COPY --from=builder /usr/src/app/painter/painter/target/painter-*.jar app.jar

# Créer le répertoire d'images
RUN mkdir -p /app/images

# Variables d'environnement
ENV JAVA_OPTS="-Xmx1024m -Xms512m"
ENV PAINTER_IMAGE_STORAGE_PATH="/app/images"

EXPOSE 8081
ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]